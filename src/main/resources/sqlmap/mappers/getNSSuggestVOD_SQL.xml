<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.wincom.imcs.api.getNSSuggestVOD.GetNSSuggestVODDao">

	<!-- 테스트 가입자 여부 조회 -->
	<select id="getTestSbc" resultType="GetNSSuggestVODRequestVO" >
		SELECT  CASE WHEN TEST_SBC = 'Y' THEN 'T' ELSE 'V' END TEST_SBC, CASE WHEN TEST_SBC = 'Y' THEN 'Y' ELSE 'N' END VIEW_FLAG2
		FROM PT_VO_CUSTOM_ID
		WHERE SA_ID = #{saId}
		AND MAC_ADDR = #{stbMac}
	</select>
	
	
	
	<!-- 랭킹 조회 (앨범ID X) -->
	<select id="getRanking1" resultType="GetNSSuggestVODRequestVO" >
		SELECT DECODE(COM_CD, 'T', 32001, 'V', 32101) RANKING_START, DECODE(COM_CD, 'T', 32020, 'V', 32120) RANKING_END
			 FROM IMCSUSER.PT_CD_COM_CD
			WHERE GRP_ID = 'SUGGEST'
			  AND MAX_VALUE = (SELECT CATEGORY_ID
			                     FROM PT_VO_CATEGORY
			                    WHERE CATEGORY_LEVEL = 1
			                    START WITH CATEGORY_ID = #{catId} CONNECT BY CATEGORY_ID = PRIOR PARENT_CATEGORY_ID)
	</select>
	
	
	
	<!-- 랭킹 조회 (앨범ID O) -->
	<select id="getRanking2" resultType="GetNSSuggestVODRequestVO" >
		SELECT TO_NUMBER(A.SYNOP) RANKING_START, TO_NUMBER(A.SYNOP) + 49 RANKING_END
			 FROM IMCSUSER.PT_CD_GENRE A,
			      IMCSUSER.PT_LA_TITLE_ASSET B,
			      IMCSUSER.PT_LA_PACKAGE_ASSET C
			WHERE A.GENRE_FLAG = 'VOD'
			  AND A.GENRE_NAME = B.GENRE_LARGE
			  AND A.GENRE_NAME2 = B.GENRE_MID
			  AND B.ADI_PRODUCT_ID = C.ADI_PRODUCT_ID
			  AND C.NSC_ALBUM_ID = #{albumId}
			  AND ROWNUM = 1
	</select>
	
	<!-- 랭킹 조회 (VOD추천정보) -->
	<select id="getRanking3" resultType="GetNSSuggestVODRequestVO" >
		SELECT TO_NUMBER(A.SYNOP) RANKING_START, TO_NUMBER(A.SYNOP) + 49 RANKING_END,
				B.GENRE_LARGE, B.GENRE_MID, B.GENRE_SMALL
			 FROM IMCSUSER.PT_CD_GENRE A,
			      IMCSUSER.PT_LA_TITLE_ASSET B,
			      IMCSUSER.PT_LA_PACKAGE_ASSET C
			WHERE A.GENRE_FLAG = 'VOD'
			  AND A.GENRE_NAME = B.GENRE_LARGE
			  AND A.GENRE_NAME2 = B.GENRE_MID
			  AND B.ADI_PRODUCT_ID = C.ADI_PRODUCT_ID
			  AND C.NSC_ALBUM_ID = #{albumId}
			  AND ROWNUM = 1
	</select>
	
	
	
	<!-- 추천 VOD 조회 -->
	<select id="getNSSuggestVODList" resultType="GetNSSuggestVODResponseVO" >
		SELECT 'CON' RESULT_TYPE, MIN(A.CONTENT_ID) CONTS_ID, R.CATEGORY_ID CAT_ID, R.CATEGORY_NAME CAT_NAME, R.SERIES_YN SERIES_YN,
			       TO_CHAR(TO_NUMBER(R.CATEGORY_LEVEL) + 1) CONTS_LEVEL, MIN(A.RANKING) RANKING
			  FROM (
			       SELECT CONTENT_ID, MIN(CATEGORY_ID) CATEGORY_ID, MIN(ASSET_NAME) ASSET_NAME, MIN(RANKING) RANKING
			         FROM AVBM_QBIC_TNSVOD_TB
			        WHERE RANKING BETWEEN #{rankingStart} AND #{rankingEnd}
			        GROUP BY CONTENT_ID) A,
			      PT_VO_CATEGORY_MAP M,
			      PT_VO_CATEGORY R
			WHERE A.CATEGORY_ID = M.CATEGORY_ID
			  AND A.CONTENT_ID = M.CONTENTS_ID
			  AND A.CATEGORY_ID = R.CATEGORY_ID
			  AND R.CATEGORY_GB = 'NSC'
			  AND NVL(M.SAMPLE_YN, 'N') = 'N'
			  AND NVL(R.SERIES_YN,'N') = 'Y'
			GROUP BY  R.CATEGORY_ID, R.CATEGORY_NAME, R.SERIES_YN, R.CATEGORY_LEVEL
			UNION
			SELECT 'CON' RESULT_TYPE, A.CONTENT_ID CONTS_ID,  R.CATEGORY_ID CAT_ID, R.CATEGORY_NAME CAT_NAME, R.SERIES_YN SERIES_YN,
			     TO_CHAR(TO_NUMBER(R.CATEGORY_LEVEL) + 1) CONTS_LEVEL, A.RANKING RANKING
			  FROM (
			       SELECT CONTENT_ID, MIN(CATEGORY_ID) CATEGORY_ID, MIN(ASSET_NAME) ASSET_NAME, MIN(RANKING) RANKING
			         FROM AVBM_QBIC_TNSVOD_TB
			        WHERE RANKING BETWEEN #{rankingStart} AND #{rankingEnd}
			        GROUP BY CONTENT_ID) A,
			      PT_VO_CATEGORY_MAP M,
			      PT_VO_CATEGORY R
			WHERE A.CATEGORY_ID = M.CATEGORY_ID
			  AND A.CONTENT_ID = M.CONTENTS_ID
			  AND A.CATEGORY_ID = R.CATEGORY_ID
			  AND R.CATEGORY_GB = 'NSC'
			  AND NVL(M.SAMPLE_YN, 'N') = 'N'
			  AND NVL(R.SERIES_YN,'N') = 'N'
			ORDER BY RANKING, CONTS_ID
	</select>
	
	
	
	<!-- 추천 VOD 상세조회 -->
	<select id="getNSSuggestVODDtl" resultType="GetNSSuggestVODResponseVO" >
		<![CDATA[
			SELECT /*+ LEADING(K A) USE_NL(K A R T C S D P) */ 
			      A.ADI_ALBUM_NAME CONTS_NAME, A.ONAIR_DATE ONAIR_DATE, A.SERIES_NO SERIES_DESC, A.IS_RH REALHD_YN,
			      MIN(R.CHA_NUM) CHA_NUM, MAX(R.CREATE_DATE) IS_NEW, MAX(R.RANK_NO) SORT_NO, MIN(P.PRODUCT_TYPE) PRODUCT_TYPE, MIN(S.CONTENT_VALUE) IMG_FILE_NAME,
			      CASE WHEN TO_NUMBER(NVL(MAX(T.SUGGESTED_PRICE), '0'))>0 AND SUBSTR(MIN(P.PRODUCT_TYPE), 1, 1) <> '0' THEN 'Y' ELSE 'N' END SUGGESTED_PRICE_YN,
			      MAX(NVL(T.SUGGESTED_PRICE, '0')) TEMP_PRICE, MAX(NVL(T.RATING, '')) PR_INFO,
			      MAX(DECODE(TO_CHAR(TO_NUMBER(SUBSTR(T.DISPLAY_RUN_TIME,1,2))*60 + TO_NUMBER(SUBSTR(T.DISPLAY_RUN_TIME,3,2))) , '0', '1',
			                 TO_CHAR(TO_NUMBER(SUBSTR(T.DISPLAY_RUN_TIME,1,2))*60 + TO_NUMBER(SUBSTR(T.DISPLAY_RUN_TIME,3,2)))  )) RUNTIME,
			      CASE WHEN MAX(NVL(T.CATEGORY, '')) = 'KBS' THEN '0' WHEN MAX(NVL(T.CATEGORY, '')) = 'MBC' THEN '0' WHEN MAX(NVL(T.CATEGORY, '')) = 'SBS' THEN '0' ELSE '1' END TERR_YN,
			      MAX(UPPER(NVL(C.AUDIO_TYPE, ''))) IS_51CH, MAX(NVL(C.HDCONTENT, 'N')) HDCONTENT, MAX(NVL(C.IS_3D, 'N')) IS_3D,
			      MAX(CASE WHEN NVL(T.DUBBING, 'N') = 'Y' THEN 'D' WHEN NVL(C.SMI_YN, 'N')='Y' AND NVL(C.SMI_IMP_YN, 'N') ='Y' THEN 'Y' ELSE 'N' END) IS_CAPTION,
			      TO_CHAR(ROUND(TO_NUMBER(A.POINT_SUM)/TO_NUMBER(CASE WHEN A.POINT_CNT= '0' THEN '1' ELSE A.POINT_CNT END), 0)) POINT,
			      ( SELECT V.CATEGORY_ID FROM PT_VO_CATEGORY_MAP Q, PT_VO_CATEGORY V
			         WHERE Q.CONTENTS_ID = #{albumId}
			           AND Q.CATEGORY_ID = V.CATEGORY_ID
			           AND V.SERIES_YN = 'Y'
			           AND V.CATEGORY_GB = 'NSC'
			           AND NVL(V.NSC_GB, 'LTE') = #{nscType}
			           AND (V.TEST_SBC = 'N' OR V.TEST_SBC IS NULL OR V.TEST_SBC = '')
			           AND ROWNUM = 1 ) AS SER_CAT_ID,
			      MAX(T.SUGGESTED_PRICE) SUGGESTED_PRICE,
			      MAX(CASE WHEN SERIES_YN = 'N' THEN R.CATEGORY_ID ELSE '' END) AS CAT_ID
			 FROM
			      ( SELECT NSC_ALBUM_ID, ADI_PRODUCT_ID, ASSET_ID FROM IMCSUSER.PT_LA_PACKAGE_ASSET
			         WHERE NSC_ALBUM_ID = #{albumId}) K,
			      ( SELECT ADI_ALBUM_ID, ADI_ALBUM_NAME, POINT_SUM, POINT_CNT, ONAIR_DATE, SERIES_NO, NVL(IS_RH, 'N') IS_RH
			          FROM IMCSUSER.PT_LA_ALBUM_MST
			         WHERE ADI_ALBUM_ID = #{albumId}) A,
			      ( SELECT /*+ no_merge USE_NL( M R ) */ M.CONTENTS_ID, M.CATEGORY_ID, NVL(R.SERIES_YN, 'N') AS SERIES_YN, M.CHA_NUM, M.RANK_NO, M.CREATE_DATE, M.VIEWING_FLAG
			          FROM PT_VO_CATEGORY_MAP M, PT_VO_CATEGORY R
			         WHERE M.contents_id = #{albumId}
        		       AND M.category_id = R.CATEGORY_ID
        		       AND R.category_gb = 'NSC'
        		 	   AND NVL(R.TEST_SBC,'N') IN ('N', #{testSbc})
        		       AND NVL(M.SAMPLE_YN, 'N') = 'N') R,			           
			      IMCSUSER.PT_LA_TITLE_ASSET T,
			      IMCSUSER.PT_LA_CONTENT_ASSET C,
			      IMCSUSER.PT_LA_POSTER_ASSET S,
			      IMCSUSER.PT_PD_PACKAGE_DETAIL D,
			      IMCSUSER.PT_PD_PACKAGE P
			WHERE K.NSC_ALBUM_ID = A.ADI_ALBUM_ID
			  AND K.NSC_ALBUM_ID = R.CONTENTS_ID
			  AND K.ADI_PRODUCT_ID = T.ADI_PRODUCT_ID
			  AND K.ADI_PRODUCT_ID = C.ADI_PRODUCT_ID
			  AND K.ADI_PRODUCT_ID = S.ADI_PRODUCT_ID
			  AND K.ASSET_ID = D.CONTENTS_ID
			  AND P.PRODUCT_ID = D.PRODUCT_ID
			  AND SUBSTR(T.BILLING_ID, TO_NUMBER(#{definFlag}), 1) = '1'
			  AND (NVL(C.PRE_MAPPING_YN, 'N') = 'N' OR (NVL(C.PRE_MAPPING_YN, 'N') = 'Y' AND NVL(R.VIEWING_FLAG, 'N') IN ('V', #{viewFlag1}, #{viewFlag2})))
			GROUP BY A.ADI_ALBUM_NAME, A.ONAIR_DATE, A.SERIES_NO, A.IS_RH, A.POINT_CNT, A.POINT_SUM
		]]>		
	</select>
	
</mapper>
	
	
	